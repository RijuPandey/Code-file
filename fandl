# Code of Find the first and last occurance of an element

 #code

class Solution {
 public int[] searchRange(int[] nums, int target) {
    return new int[]{findFirstIndex(nums, target), findLastIndex(nums, target)};
}

private static int findFirstIndex(int[] nums, int target) {
    int start = 0, end = nums.length - 1;
    while (start <= end) {
        int mid = start + (end - start) / 2;
        if (nums[mid] == target) {
            // Check if it's the first occurrence
            if (mid == 0 || nums[mid - 1] != target) {
                return mid;
            } else {
                end = mid - 1;
            }
        } else if (target < nums[mid]) {
            end = mid - 1;
        } else {
            start = mid + 1;
        }
    }
    return -1; // Target not found
}

private static int findLastIndex(int[] nums, int target) {
    int start = 0, end = nums.length - 1;
    while (start <= end) {
        int mid = start + (end - start) / 2;
        if (nums[mid] == target) {
            // Check if it's the last occurrence
            if (mid == nums.length - 1 || nums[mid + 1] != target) {
                return mid;
            } else {
                start = mid + 1;
            }
        } else if (target < nums[mid]) {
            end = mid - 1;
        } else {
            start = mid + 1;
        }
    }
    return -1; // Target not found
}
}

 #Approach
searchRange():

This is the main method that returns an array containing two elements:
The index of the first occurrence of the target.
The index of the last occurrence of the target.
It calls the helper functions findFirstIndex and findLastIndex to find these indices.

findFirstIndex():
This method uses binary search to find the first occurrence of the target.
Key condition: When nums[mid] == target, it checks whether this is the first occurrence by seeing if mid == 0 (i.e., it's the first element) or if nums[mid - 1] != target (i.e., no earlier occurrence).
If it's not the first occurrence, the search continues in the left half (end = mid - 1).
If nums[mid] > target, it continues searching in the left half.
If nums[mid] < target, it searches in the right half.

findLastIndex():
This method uses binary search to find the last occurrence of the target.
Key condition: When nums[mid] == target, it checks whether this is the last occurrence by seeing if mid == nums.length - 1 (i.e., it's the last element) or if nums[mid + 1] != target (i.e., no later occurrence).
If it's not the last occurrence, the search continues in the right half (start = mid + 1).
Similar to findFirstIndex, it continues searching in the left or right half depending on the value of nums[mid] compared to the target.

TIME COMPLEXITY:
Binary Search: In both findFirstIndex and findLastIndex, we use binary search, which operates in O(log n) time, where n is the number of elements in the array.
Since we perform two separate binary searches (one for the first occurrence and one for the last occurrence), the overall time complexity is:
O(log n) + O(log n) = O(log n)

SPACE COMPLEXITY:
The space complexity is O(1) because we are not using any extra data structures (apart from a few variables for storing indices like start, end, mid). The only additional space used is for the output array, which is constant (size 2).
